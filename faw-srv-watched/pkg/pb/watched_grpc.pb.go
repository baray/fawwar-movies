// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/watched/pb/watched.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchedServiceClient is the client API for WatchedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchedServiceClient interface {
	WatchMovie(ctx context.Context, in *WatchMovieRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RatingMovie(ctx context.Context, in *RatingMovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	WatchedList(ctx context.Context, in *WatchedListRequest, opts ...grpc.CallOption) (*WatchedListResponse, error)
}

type watchedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchedServiceClient(cc grpc.ClientConnInterface) WatchedServiceClient {
	return &watchedServiceClient{cc}
}

func (c *watchedServiceClient) WatchMovie(ctx context.Context, in *WatchMovieRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/watched.WatchedService/WatchMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchedServiceClient) RatingMovie(ctx context.Context, in *RatingMovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/watched.WatchedService/RatingMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchedServiceClient) WatchedList(ctx context.Context, in *WatchedListRequest, opts ...grpc.CallOption) (*WatchedListResponse, error) {
	out := new(WatchedListResponse)
	err := c.cc.Invoke(ctx, "/watched.WatchedService/WatchedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchedServiceServer is the server API for WatchedService service.
// All implementations must embed UnimplementedWatchedServiceServer
// for forward compatibility
type WatchedServiceServer interface {
	WatchMovie(context.Context, *WatchMovieRequest) (*StatusResponse, error)
	RatingMovie(context.Context, *RatingMovieRequest) (*MovieResponse, error)
	WatchedList(context.Context, *WatchedListRequest) (*WatchedListResponse, error)
	mustEmbedUnimplementedWatchedServiceServer()
}

// UnimplementedWatchedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchedServiceServer struct {
}

func (UnimplementedWatchedServiceServer) WatchMovie(context.Context, *WatchMovieRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchMovie not implemented")
}
func (UnimplementedWatchedServiceServer) RatingMovie(context.Context, *RatingMovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingMovie not implemented")
}
func (UnimplementedWatchedServiceServer) WatchedList(context.Context, *WatchedListRequest) (*WatchedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchedList not implemented")
}
func (UnimplementedWatchedServiceServer) mustEmbedUnimplementedWatchedServiceServer() {}

// UnsafeWatchedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchedServiceServer will
// result in compilation errors.
type UnsafeWatchedServiceServer interface {
	mustEmbedUnimplementedWatchedServiceServer()
}

func RegisterWatchedServiceServer(s grpc.ServiceRegistrar, srv WatchedServiceServer) {
	s.RegisterService(&WatchedService_ServiceDesc, srv)
}

func _WatchedService_WatchMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchedServiceServer).WatchMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watched.WatchedService/WatchMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchedServiceServer).WatchMovie(ctx, req.(*WatchMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchedService_RatingMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchedServiceServer).RatingMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watched.WatchedService/RatingMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchedServiceServer).RatingMovie(ctx, req.(*RatingMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchedService_WatchedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchedServiceServer).WatchedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watched.WatchedService/WatchedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchedServiceServer).WatchedList(ctx, req.(*WatchedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchedService_ServiceDesc is the grpc.ServiceDesc for WatchedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "watched.WatchedService",
	HandlerType: (*WatchedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchMovie",
			Handler:    _WatchedService_WatchMovie_Handler,
		},
		{
			MethodName: "RatingMovie",
			Handler:    _WatchedService_RatingMovie_Handler,
		},
		{
			MethodName: "WatchedList",
			Handler:    _WatchedService_WatchedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/watched/pb/watched.proto",
}
